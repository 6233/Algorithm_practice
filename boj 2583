#include <iostream>
#include <cstdio>
#include <algorithm>
#include <queue>
#include <cstring>
#include <string>
using namespace std;

queue<pair<int, int>> q;
vector<int> v;
int check[103][103];


int main()
{
	

	memset(check, 2, sizeof(check));
	int n, m, k;

	cin >> m >> n >> k;

	for (int i = 1; i <= n; i++)
		for (int j = 1; j <= m; j++)
			check[i][j] = 0;


	for (int i = 0; i < k; i++)
	{
		int x1, y1, x2, y2;
		
		cin >> x1 >> y1 >> x2 >> y2;
		x1++;y1++;
		for(; x1<=x2; x1++)
			for (int y=y1; y<=y2; y++)
			{
				check[x1][y]=1;
			}
	}

	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= m; j++)
		{
			int result = 0;

			if (check[i][j] == 0)
			{
				q.push(make_pair(i,j));
				result++;
				check[i][j] = 1;
				
				while (!q.empty())
				{
				 int x=q.front().first;
				 int y =q.front().second;
				 if (check[x - 1][y] == 0)
				 {
					 q.push(make_pair(x - 1, y));
					 check[x - 1][y]=1;
					 result++;
				 }
				 if (check[x ][y+1] == 0)
				 {
					 q.push(make_pair(x, y + 1));
					 check[x ][y+1] = 1;
					 result++;
				 }
				 if (check[x+1][y] == 0)
				 {
					 q.push(make_pair(x + 1, y));
					 check[x + 1][y] = 1;
					 result++;
				 }
				 if (check[x][y-1] ==0)
				 {
					 q.push(make_pair(x, y - 1));
					 check[x][y-1] = 1;
					 result++;
				 }



				 q.pop();
				}

				v.push_back(result);
				result = 0;
			}

		}
	}


	sort(v.begin(), v.end());

	cout << v.size() << '\n';

	for(int i=0; i<v.size(); i++)
		cout << v[i] << ' ';

		cout << '\n';
}
